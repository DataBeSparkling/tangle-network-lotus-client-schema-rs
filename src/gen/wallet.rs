// Code generated by github.com/tangle-network/lotus-client-schema-rs/rust-schemagen. DO NOT EDIT.

// Code generated by github.com/tangle-network/lotus-client-schema-rs/rust-schemagen. DO NOT EDIT.

use jsonrpc_core::Error;
use serde_json::Value;

use crate::client::LotusClient;

#[async_trait::async_trait]
pub trait WalletApi {
    async fn wallet_delete(&self, param1: Value, param2: Value) -> Result<Value, Error>;

    async fn wallet_export(&self, param1: Value, param2: Value) -> Result<Value, Error>;

    async fn wallet_has(&self, param1: Value, param2: Value) -> Result<Value, Error>;

    async fn wallet_import(&self, param1: Value, param2: Value) -> Result<Value, Error>;

    async fn wallet_list(&self, param1: Value) -> Result<Value, Error>;

    async fn wallet_new(&self, param1: Value, param2: Value) -> Result<Value, Error>;

    async fn wallet_sign(
        &self,
        param1: Value,
        param2: Value,
        param3: Value,
        param4: Value,
    ) -> Result<Value, Error>;
}

#[derive(Debug, Clone)]
pub struct WalletClient {
    client: LotusClient,
}

#[async_trait::async_trait]
impl WalletApi for WalletClient {
    async fn wallet_delete(&self, param1: Value, param2: Value) -> Result<Value, Error> {
        self.client
            .request("WalletDelete", vec![param1, param2])
            .await
    }

    async fn wallet_export(&self, param1: Value, param2: Value) -> Result<Value, Error> {
        self.client
            .request("WalletExport", vec![param1, param2])
            .await
    }

    async fn wallet_has(&self, param1: Value, param2: Value) -> Result<Value, Error> {
        self.client.request("WalletHas", vec![param1, param2]).await
    }

    async fn wallet_import(&self, param1: Value, param2: Value) -> Result<Value, Error> {
        self.client
            .request("WalletImport", vec![param1, param2])
            .await
    }

    async fn wallet_list(&self, param1: Value) -> Result<Value, Error> {
        self.client.request("WalletList", vec![param1]).await
    }

    async fn wallet_new(&self, param1: Value, param2: Value) -> Result<Value, Error> {
        self.client.request("WalletNew", vec![param1, param2]).await
    }

    async fn wallet_sign(
        &self,
        param1: Value,
        param2: Value,
        param3: Value,
        param4: Value,
    ) -> Result<Value, Error> {
        self.client
            .request("WalletSign", vec![param1, param2, param3, param4])
            .await
    }
}
