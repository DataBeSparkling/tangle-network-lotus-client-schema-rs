// Code generated by github.com/tangle-network/lotus-client-schema-rs/rust-schemagen. DO NOT EDIT.

// Code generated by github.com/tangle-network/lotus-client-schema-rs/rust-schemagen. DO NOT EDIT.

use crate::client::LotusClient;
use jsonrpc_core::Error;
use serde_json::Value;
use tokio::sync::mpsc;

#[async_trait::async_trait]
pub trait CommonApi {
    async fn auth_new(&self, param1: Value, param2: Value) -> Result<Value, Error>;

    async fn auth_verify(&self, param1: Value, param2: Value) -> Result<Value, Error>;

    async fn closing(&self, param1: Value) -> Result<mpsc::Receiver<Value>, Error>;

    async fn discover(&self, param1: Value) -> Result<Value, Error>;

    async fn log_alerts(&self, param1: Value) -> Result<Value, Error>;

    async fn log_list(&self, param1: Value) -> Result<Value, Error>;

    async fn log_set_level(
        &self,
        param1: Value,
        param2: Value,
        param3: Value,
    ) -> Result<Value, Error>;

    async fn session(&self, param1: Value) -> Result<Value, Error>;

    async fn shutdown(&self, param1: Value) -> Result<Value, Error>;

    async fn version(&self, param1: Value) -> Result<Value, Error>;
}

#[derive(Debug, Clone)]
pub struct CommonClient {
    client: LotusClient,
}

#[async_trait::async_trait]
impl CommonApi for CommonClient {
    async fn auth_new(&self, param1: Value, param2: Value) -> Result<Value, Error> {
        self.client.request("AuthNew", vec![param1, param2]).await
    }

    async fn auth_verify(&self, param1: Value, param2: Value) -> Result<Value, Error> {
        self.client
            .request("AuthVerify", vec![param1, param2])
            .await
    }

    async fn closing(&self, param1: Value) -> Result<mpsc::Receiver<Value>, Error> {
        self.client.subscribe("Closing", vec![param1]).await
    }

    async fn discover(&self, param1: Value) -> Result<Value, Error> {
        self.client.request("Discover", vec![param1]).await
    }

    async fn log_alerts(&self, param1: Value) -> Result<Value, Error> {
        self.client.request("LogAlerts", vec![param1]).await
    }

    async fn log_list(&self, param1: Value) -> Result<Value, Error> {
        self.client.request("LogList", vec![param1]).await
    }

    async fn log_set_level(
        &self,
        param1: Value,
        param2: Value,
        param3: Value,
    ) -> Result<Value, Error> {
        self.client
            .request("LogSetLevel", vec![param1, param2, param3])
            .await
    }

    async fn session(&self, param1: Value) -> Result<Value, Error> {
        self.client.request("Session", vec![param1]).await
    }

    async fn shutdown(&self, param1: Value) -> Result<Value, Error> {
        self.client.request("Shutdown", vec![param1]).await
    }

    async fn version(&self, param1: Value) -> Result<Value, Error> {
        self.client.request("Version", vec![param1]).await
    }
}
